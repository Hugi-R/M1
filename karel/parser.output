   0  $accept : %entry% $end

   1  start_prog :

   2  prog : BEGIN_PROG start_prog define BEGIN_EXEC adr stmts_opt END_EXEC END_PROG

   3  define :
   4         | define_new define

   5  stmts_opt :
   6            | stmts

   7  stmts : stmt
   8        | stmts SEMI stmt
   9        | stmts SEMI

  10  stmt : simple_stmt

  11  adr :

  12  iter : INT

  13  else_ : ELSE

  14  simple_stmt : TURN_LEFT
  15              | TURN_OFF
  16              | MOVE
  17              | PICK_BEEPER
  18              | PUT_BEEPER
  19              | BEGIN stmts END
  20              | ITERATE iter TIMES stmt
  21              | WHILE adr if_test DO stmt
  22              | IF if_test THEN stmt
  23              | IF if_test THEN stmt else_ adr stmt
  24              | ID

  25  test : FRONT_IS_CLEAR
  26       | FRONT_IS_BLOCKED
  27       | LEFT_IS_CLEAR
  28       | LEFT_IS_BLOCKED
  29       | RIGHT_IS_CLEAR
  30       | RIGHT_IS_BLOCKED
  31       | NEXT_TO_A_BEEPER
  32       | NOT_NEXT_TO_A_BEEPER
  33       | FACING_NORTH
  34       | NOT_FACING_NORTH
  35       | FACING_EAST
  36       | NOT_FACING_EAST
  37       | FACING_SOUTH
  38       | NOT_FACING_SOUTH
  39       | FACING_WEST
  40       | NOT_FACING_WEST
  41       | ANY_BEEPERS_IN_BEEPER_BAG
  42       | NO_BEEPERS_IN_BEEPER_BAG

  43  prologue : ID

  44  define_new : DEFINE_NEW prologue AS stmts

  45  if_test : test

  46  %entry% : '\001' prog

state 0
	$accept : . %entry% $end  (0)

	'\001'  shift 1
	.  error

	%entry%  goto 2


state 1
	%entry% : '\001' . prog  (46)

	BEGIN_PROG  shift 3
	.  error

	prog  goto 4


state 2
	$accept : %entry% . $end  (0)

	$end  accept


state 3
	prog : BEGIN_PROG . start_prog define BEGIN_EXEC adr stmts_opt END_EXEC END_PROG  (2)
	start_prog : .  (1)

	.  reduce 1

	start_prog  goto 5


state 4
	%entry% : '\001' prog .  (46)

	.  reduce 46


state 5
	prog : BEGIN_PROG start_prog . define BEGIN_EXEC adr stmts_opt END_EXEC END_PROG  (2)
	define : .  (3)

	DEFINE_NEW  shift 6
	BEGIN_EXEC  reduce 3

	define  goto 7
	define_new  goto 8


state 6
	define_new : DEFINE_NEW . prologue AS stmts  (44)

	ID  shift 9
	.  error

	prologue  goto 10


state 7
	prog : BEGIN_PROG start_prog define . BEGIN_EXEC adr stmts_opt END_EXEC END_PROG  (2)

	BEGIN_EXEC  shift 11
	.  error


state 8
	define : define_new . define  (4)
	define : .  (3)

	DEFINE_NEW  shift 6
	BEGIN_EXEC  reduce 3

	define  goto 12
	define_new  goto 8


state 9
	prologue : ID .  (43)

	.  reduce 43


state 10
	define_new : DEFINE_NEW prologue . AS stmts  (44)

	AS  shift 13
	.  error


state 11
	prog : BEGIN_PROG start_prog define BEGIN_EXEC . adr stmts_opt END_EXEC END_PROG  (2)
	adr : .  (11)

	.  reduce 11

	adr  goto 14


state 12
	define : define_new define .  (4)

	.  reduce 4


state 13
	define_new : DEFINE_NEW prologue AS . stmts  (44)

	MOVE  shift 15
	TURN_LEFT  shift 16
	TURN_OFF  shift 17
	PICK_BEEPER  shift 18
	PUT_BEEPER  shift 19
	ITERATE  shift 20
	WHILE  shift 21
	IF  shift 22
	ID  shift 23
	BEGIN  shift 24
	.  error

	stmts  goto 25
	stmt  goto 26
	simple_stmt  goto 27


state 14
	prog : BEGIN_PROG start_prog define BEGIN_EXEC adr . stmts_opt END_EXEC END_PROG  (2)
	stmts_opt : .  (5)

	MOVE  shift 15
	TURN_LEFT  shift 16
	TURN_OFF  shift 17
	PICK_BEEPER  shift 18
	PUT_BEEPER  shift 19
	ITERATE  shift 20
	WHILE  shift 21
	IF  shift 22
	ID  shift 23
	BEGIN  shift 24
	END_EXEC  reduce 5

	stmts_opt  goto 28
	stmts  goto 29
	stmt  goto 26
	simple_stmt  goto 27


state 15
	simple_stmt : MOVE .  (16)

	.  reduce 16


state 16
	simple_stmt : TURN_LEFT .  (14)

	.  reduce 14


state 17
	simple_stmt : TURN_OFF .  (15)

	.  reduce 15


state 18
	simple_stmt : PICK_BEEPER .  (17)

	.  reduce 17


state 19
	simple_stmt : PUT_BEEPER .  (18)

	.  reduce 18


state 20
	simple_stmt : ITERATE . iter TIMES stmt  (20)

	INT  shift 30
	.  error

	iter  goto 31


state 21
	simple_stmt : WHILE . adr if_test DO stmt  (21)
	adr : .  (11)

	.  reduce 11

	adr  goto 32


state 22
	simple_stmt : IF . if_test THEN stmt  (22)
	simple_stmt : IF . if_test THEN stmt else_ adr stmt  (23)

	NEXT_TO_A_BEEPER  shift 33
	FRONT_IS_CLEAR  shift 34
	FRONT_IS_BLOCKED  shift 35
	LEFT_IS_CLEAR  shift 36
	LEFT_IS_BLOCKED  shift 37
	RIGHT_IS_CLEAR  shift 38
	RIGHT_IS_BLOCKED  shift 39
	NOT_NEXT_TO_A_BEEPER  shift 40
	FACING_NORTH  shift 41
	NOT_FACING_NORTH  shift 42
	FACING_EAST  shift 43
	NOT_FACING_EAST  shift 44
	FACING_SOUTH  shift 45
	NOT_FACING_SOUTH  shift 46
	FACING_WEST  shift 47
	NOT_FACING_WEST  shift 48
	ANY_BEEPERS_IN_BEEPER_BAG  shift 49
	NO_BEEPERS_IN_BEEPER_BAG  shift 50
	.  error

	if_test  goto 51
	test  goto 52


state 23
	simple_stmt : ID .  (24)

	.  reduce 24


state 24
	simple_stmt : BEGIN . stmts END  (19)

	MOVE  shift 15
	TURN_LEFT  shift 16
	TURN_OFF  shift 17
	PICK_BEEPER  shift 18
	PUT_BEEPER  shift 19
	ITERATE  shift 20
	WHILE  shift 21
	IF  shift 22
	ID  shift 23
	BEGIN  shift 24
	.  error

	stmts  goto 53
	stmt  goto 26
	simple_stmt  goto 27


state 25
	stmts : stmts . SEMI stmt  (8)
	stmts : stmts . SEMI  (9)
	define_new : DEFINE_NEW prologue AS stmts .  (44)

	SEMI  shift 54
	BEGIN_EXEC  reduce 44
	DEFINE_NEW  reduce 44


state 26
	stmts : stmt .  (7)

	.  reduce 7


state 27
	stmt : simple_stmt .  (10)

	.  reduce 10


state 28
	prog : BEGIN_PROG start_prog define BEGIN_EXEC adr stmts_opt . END_EXEC END_PROG  (2)

	END_EXEC  shift 55
	.  error


state 29
	stmts_opt : stmts .  (6)
	stmts : stmts . SEMI stmt  (8)
	stmts : stmts . SEMI  (9)

	SEMI  shift 54
	END_EXEC  reduce 6


state 30
	iter : INT .  (12)

	.  reduce 12


state 31
	simple_stmt : ITERATE iter . TIMES stmt  (20)

	TIMES  shift 56
	.  error


state 32
	simple_stmt : WHILE adr . if_test DO stmt  (21)

	NEXT_TO_A_BEEPER  shift 33
	FRONT_IS_CLEAR  shift 34
	FRONT_IS_BLOCKED  shift 35
	LEFT_IS_CLEAR  shift 36
	LEFT_IS_BLOCKED  shift 37
	RIGHT_IS_CLEAR  shift 38
	RIGHT_IS_BLOCKED  shift 39
	NOT_NEXT_TO_A_BEEPER  shift 40
	FACING_NORTH  shift 41
	NOT_FACING_NORTH  shift 42
	FACING_EAST  shift 43
	NOT_FACING_EAST  shift 44
	FACING_SOUTH  shift 45
	NOT_FACING_SOUTH  shift 46
	FACING_WEST  shift 47
	NOT_FACING_WEST  shift 48
	ANY_BEEPERS_IN_BEEPER_BAG  shift 49
	NO_BEEPERS_IN_BEEPER_BAG  shift 50
	.  error

	if_test  goto 57
	test  goto 52


state 33
	test : NEXT_TO_A_BEEPER .  (31)

	.  reduce 31


state 34
	test : FRONT_IS_CLEAR .  (25)

	.  reduce 25


state 35
	test : FRONT_IS_BLOCKED .  (26)

	.  reduce 26


state 36
	test : LEFT_IS_CLEAR .  (27)

	.  reduce 27


state 37
	test : LEFT_IS_BLOCKED .  (28)

	.  reduce 28


state 38
	test : RIGHT_IS_CLEAR .  (29)

	.  reduce 29


state 39
	test : RIGHT_IS_BLOCKED .  (30)

	.  reduce 30


state 40
	test : NOT_NEXT_TO_A_BEEPER .  (32)

	.  reduce 32


state 41
	test : FACING_NORTH .  (33)

	.  reduce 33


state 42
	test : NOT_FACING_NORTH .  (34)

	.  reduce 34


state 43
	test : FACING_EAST .  (35)

	.  reduce 35


state 44
	test : NOT_FACING_EAST .  (36)

	.  reduce 36


state 45
	test : FACING_SOUTH .  (37)

	.  reduce 37


state 46
	test : NOT_FACING_SOUTH .  (38)

	.  reduce 38


state 47
	test : FACING_WEST .  (39)

	.  reduce 39


state 48
	test : NOT_FACING_WEST .  (40)

	.  reduce 40


state 49
	test : ANY_BEEPERS_IN_BEEPER_BAG .  (41)

	.  reduce 41


state 50
	test : NO_BEEPERS_IN_BEEPER_BAG .  (42)

	.  reduce 42


state 51
	simple_stmt : IF if_test . THEN stmt  (22)
	simple_stmt : IF if_test . THEN stmt else_ adr stmt  (23)

	THEN  shift 58
	.  error


state 52
	if_test : test .  (45)

	.  reduce 45


state 53
	stmts : stmts . SEMI stmt  (8)
	stmts : stmts . SEMI  (9)
	simple_stmt : BEGIN stmts . END  (19)

	SEMI  shift 54
	END  shift 59
	.  error


state 54
	stmts : stmts SEMI . stmt  (8)
	stmts : stmts SEMI .  (9)

	MOVE  shift 15
	TURN_LEFT  shift 16
	TURN_OFF  shift 17
	PICK_BEEPER  shift 18
	PUT_BEEPER  shift 19
	ITERATE  shift 20
	WHILE  shift 21
	IF  shift 22
	ID  shift 23
	BEGIN  shift 24
	BEGIN_EXEC  reduce 9
	END_EXEC  reduce 9
	DEFINE_NEW  reduce 9
	SEMI  reduce 9
	END  reduce 9

	stmt  goto 60
	simple_stmt  goto 27


state 55
	prog : BEGIN_PROG start_prog define BEGIN_EXEC adr stmts_opt END_EXEC . END_PROG  (2)

	END_PROG  shift 61
	.  error


state 56
	simple_stmt : ITERATE iter TIMES . stmt  (20)

	MOVE  shift 15
	TURN_LEFT  shift 16
	TURN_OFF  shift 17
	PICK_BEEPER  shift 18
	PUT_BEEPER  shift 19
	ITERATE  shift 20
	WHILE  shift 21
	IF  shift 22
	ID  shift 23
	BEGIN  shift 24
	.  error

	stmt  goto 62
	simple_stmt  goto 27


state 57
	simple_stmt : WHILE adr if_test . DO stmt  (21)

	DO  shift 63
	.  error


state 58
	simple_stmt : IF if_test THEN . stmt  (22)
	simple_stmt : IF if_test THEN . stmt else_ adr stmt  (23)

	MOVE  shift 15
	TURN_LEFT  shift 16
	TURN_OFF  shift 17
	PICK_BEEPER  shift 18
	PUT_BEEPER  shift 19
	ITERATE  shift 20
	WHILE  shift 21
	IF  shift 22
	ID  shift 23
	BEGIN  shift 24
	.  error

	stmt  goto 64
	simple_stmt  goto 27


state 59
	simple_stmt : BEGIN stmts END .  (19)

	.  reduce 19


state 60
	stmts : stmts SEMI stmt .  (8)

	.  reduce 8


state 61
	prog : BEGIN_PROG start_prog define BEGIN_EXEC adr stmts_opt END_EXEC END_PROG .  (2)

	.  reduce 2


state 62
	simple_stmt : ITERATE iter TIMES stmt .  (20)

	.  reduce 20


state 63
	simple_stmt : WHILE adr if_test DO . stmt  (21)

	MOVE  shift 15
	TURN_LEFT  shift 16
	TURN_OFF  shift 17
	PICK_BEEPER  shift 18
	PUT_BEEPER  shift 19
	ITERATE  shift 20
	WHILE  shift 21
	IF  shift 22
	ID  shift 23
	BEGIN  shift 24
	.  error

	stmt  goto 65
	simple_stmt  goto 27


state 64
	simple_stmt : IF if_test THEN stmt .  (22)
	simple_stmt : IF if_test THEN stmt . else_ adr stmt  (23)

	ELSE  shift 66
	BEGIN_EXEC  reduce 22
	END_EXEC  reduce 22
	DEFINE_NEW  reduce 22
	SEMI  reduce 22
	END  reduce 22

	else_  goto 67


state 65
	simple_stmt : WHILE adr if_test DO stmt .  (21)

	.  reduce 21


state 66
	else_ : ELSE .  (13)

	.  reduce 13


state 67
	simple_stmt : IF if_test THEN stmt else_ . adr stmt  (23)
	adr : .  (11)

	.  reduce 11

	adr  goto 68


state 68
	simple_stmt : IF if_test THEN stmt else_ adr . stmt  (23)

	MOVE  shift 15
	TURN_LEFT  shift 16
	TURN_OFF  shift 17
	PICK_BEEPER  shift 18
	PUT_BEEPER  shift 19
	ITERATE  shift 20
	WHILE  shift 21
	IF  shift 22
	ID  shift 23
	BEGIN  shift 24
	.  error

	stmt  goto 69
	simple_stmt  goto 27


state 69
	simple_stmt : IF if_test THEN stmt else_ adr stmt .  (23)

	.  reduce 23


44 terminals, 16 nonterminals
47 grammar rules, 70 states
