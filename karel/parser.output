   0  $accept : %entry% $end

   1  start_prog :

   2  prog : BEGIN_PROG start_prog define BEGIN_EXEC adr stmts_opt END_EXEC END_PROG

   3  define :
   4         | define_new define

   5  stmts_opt :
   6            | stmts

   7  stmts : stmt
   8        | stmts SEMI stmt
   9        | stmts SEMI

  10  stmt : simple_stmt

  11  adr :

  12  iter : INT
  13       | BEEPS

  14  else_ : ELSE

  15  simple_stmt : TURN_LEFT
  16              | TURN_OFF
  17              | MOVE
  18              | PICK_BEEPER
  19              | PUT_BEEPER
  20              | BEGIN stmts END
  21              | ITERATE iter TIMES stmt
  22              | WHILE adr if_test DO stmt
  23              | IF if_test THEN stmt
  24              | IF if_test THEN stmt else_ adr stmt
  25              | ID
  26              | RESET BEEPS
  27              | COUNT BEEPS init_count stmt
  28              | fromto stmt

  29  fromto : FROM BEEPS TO BEEPS

  30  init_count :

  31  test : FRONT_IS_CLEAR
  32       | FRONT_IS_BLOCKED
  33       | LEFT_IS_CLEAR
  34       | LEFT_IS_BLOCKED
  35       | RIGHT_IS_CLEAR
  36       | RIGHT_IS_BLOCKED
  37       | NEXT_TO_A_BEEPER
  38       | NOT_NEXT_TO_A_BEEPER
  39       | FACING_NORTH
  40       | NOT_FACING_NORTH
  41       | FACING_EAST
  42       | NOT_FACING_EAST
  43       | FACING_SOUTH
  44       | NOT_FACING_SOUTH
  45       | FACING_WEST
  46       | NOT_FACING_WEST
  47       | ANY_BEEPERS_IN_BEEPER_BAG
  48       | NO_BEEPERS_IN_BEEPER_BAG

  49  prologue : ID

  50  define_new : DEFINE_NEW prologue AS stmts

  51  if_test : test

  52  %entry% : '\001' prog

state 0
	$accept : . %entry% $end  (0)

	'\001'  shift 1
	.  error

	%entry%  goto 2


state 1
	%entry% : '\001' . prog  (52)

	BEGIN_PROG  shift 3
	.  error

	prog  goto 4


state 2
	$accept : %entry% . $end  (0)

	$end  accept


state 3
	prog : BEGIN_PROG . start_prog define BEGIN_EXEC adr stmts_opt END_EXEC END_PROG  (2)
	start_prog : .  (1)

	.  reduce 1

	start_prog  goto 5


state 4
	%entry% : '\001' prog .  (52)

	.  reduce 52


state 5
	prog : BEGIN_PROG start_prog . define BEGIN_EXEC adr stmts_opt END_EXEC END_PROG  (2)
	define : .  (3)

	DEFINE_NEW  shift 6
	BEGIN_EXEC  reduce 3

	define  goto 7
	define_new  goto 8


state 6
	define_new : DEFINE_NEW . prologue AS stmts  (50)

	ID  shift 9
	.  error

	prologue  goto 10


state 7
	prog : BEGIN_PROG start_prog define . BEGIN_EXEC adr stmts_opt END_EXEC END_PROG  (2)

	BEGIN_EXEC  shift 11
	.  error


state 8
	define : define_new . define  (4)
	define : .  (3)

	DEFINE_NEW  shift 6
	BEGIN_EXEC  reduce 3

	define  goto 12
	define_new  goto 8


state 9
	prologue : ID .  (49)

	.  reduce 49


state 10
	define_new : DEFINE_NEW prologue . AS stmts  (50)

	AS  shift 13
	.  error


state 11
	prog : BEGIN_PROG start_prog define BEGIN_EXEC . adr stmts_opt END_EXEC END_PROG  (2)
	adr : .  (11)

	.  reduce 11

	adr  goto 14


state 12
	define : define_new define .  (4)

	.  reduce 4


state 13
	define_new : DEFINE_NEW prologue AS . stmts  (50)

	MOVE  shift 15
	TURN_LEFT  shift 16
	TURN_OFF  shift 17
	PICK_BEEPER  shift 18
	PUT_BEEPER  shift 19
	ITERATE  shift 20
	WHILE  shift 21
	IF  shift 22
	RESET  shift 23
	COUNT  shift 24
	FROM  shift 25
	ID  shift 26
	BEGIN  shift 27
	.  error

	stmts  goto 28
	stmt  goto 29
	simple_stmt  goto 30
	fromto  goto 31


state 14
	prog : BEGIN_PROG start_prog define BEGIN_EXEC adr . stmts_opt END_EXEC END_PROG  (2)
	stmts_opt : .  (5)

	MOVE  shift 15
	TURN_LEFT  shift 16
	TURN_OFF  shift 17
	PICK_BEEPER  shift 18
	PUT_BEEPER  shift 19
	ITERATE  shift 20
	WHILE  shift 21
	IF  shift 22
	RESET  shift 23
	COUNT  shift 24
	FROM  shift 25
	ID  shift 26
	BEGIN  shift 27
	END_EXEC  reduce 5

	stmts_opt  goto 32
	stmts  goto 33
	stmt  goto 29
	simple_stmt  goto 30
	fromto  goto 31


state 15
	simple_stmt : MOVE .  (17)

	.  reduce 17


state 16
	simple_stmt : TURN_LEFT .  (15)

	.  reduce 15


state 17
	simple_stmt : TURN_OFF .  (16)

	.  reduce 16


state 18
	simple_stmt : PICK_BEEPER .  (18)

	.  reduce 18


state 19
	simple_stmt : PUT_BEEPER .  (19)

	.  reduce 19


state 20
	simple_stmt : ITERATE . iter TIMES stmt  (21)

	INT  shift 34
	BEEPS  shift 35
	.  error

	iter  goto 36


state 21
	simple_stmt : WHILE . adr if_test DO stmt  (22)
	adr : .  (11)

	.  reduce 11

	adr  goto 37


state 22
	simple_stmt : IF . if_test THEN stmt  (23)
	simple_stmt : IF . if_test THEN stmt else_ adr stmt  (24)

	NEXT_TO_A_BEEPER  shift 38
	FRONT_IS_CLEAR  shift 39
	FRONT_IS_BLOCKED  shift 40
	LEFT_IS_CLEAR  shift 41
	LEFT_IS_BLOCKED  shift 42
	RIGHT_IS_CLEAR  shift 43
	RIGHT_IS_BLOCKED  shift 44
	NOT_NEXT_TO_A_BEEPER  shift 45
	FACING_NORTH  shift 46
	NOT_FACING_NORTH  shift 47
	FACING_EAST  shift 48
	NOT_FACING_EAST  shift 49
	FACING_SOUTH  shift 50
	NOT_FACING_SOUTH  shift 51
	FACING_WEST  shift 52
	NOT_FACING_WEST  shift 53
	ANY_BEEPERS_IN_BEEPER_BAG  shift 54
	NO_BEEPERS_IN_BEEPER_BAG  shift 55
	.  error

	if_test  goto 56
	test  goto 57


state 23
	simple_stmt : RESET . BEEPS  (26)

	BEEPS  shift 58
	.  error


state 24
	simple_stmt : COUNT . BEEPS init_count stmt  (27)

	BEEPS  shift 59
	.  error


state 25
	fromto : FROM . BEEPS TO BEEPS  (29)

	BEEPS  shift 60
	.  error


state 26
	simple_stmt : ID .  (25)

	.  reduce 25


state 27
	simple_stmt : BEGIN . stmts END  (20)

	MOVE  shift 15
	TURN_LEFT  shift 16
	TURN_OFF  shift 17
	PICK_BEEPER  shift 18
	PUT_BEEPER  shift 19
	ITERATE  shift 20
	WHILE  shift 21
	IF  shift 22
	RESET  shift 23
	COUNT  shift 24
	FROM  shift 25
	ID  shift 26
	BEGIN  shift 27
	.  error

	stmts  goto 61
	stmt  goto 29
	simple_stmt  goto 30
	fromto  goto 31


state 28
	stmts : stmts . SEMI stmt  (8)
	stmts : stmts . SEMI  (9)
	define_new : DEFINE_NEW prologue AS stmts .  (50)

	SEMI  shift 62
	BEGIN_EXEC  reduce 50
	DEFINE_NEW  reduce 50


state 29
	stmts : stmt .  (7)

	.  reduce 7


state 30
	stmt : simple_stmt .  (10)

	.  reduce 10


state 31
	simple_stmt : fromto . stmt  (28)

	MOVE  shift 15
	TURN_LEFT  shift 16
	TURN_OFF  shift 17
	PICK_BEEPER  shift 18
	PUT_BEEPER  shift 19
	ITERATE  shift 20
	WHILE  shift 21
	IF  shift 22
	RESET  shift 23
	COUNT  shift 24
	FROM  shift 25
	ID  shift 26
	BEGIN  shift 27
	.  error

	stmt  goto 63
	simple_stmt  goto 30
	fromto  goto 31


state 32
	prog : BEGIN_PROG start_prog define BEGIN_EXEC adr stmts_opt . END_EXEC END_PROG  (2)

	END_EXEC  shift 64
	.  error


state 33
	stmts_opt : stmts .  (6)
	stmts : stmts . SEMI stmt  (8)
	stmts : stmts . SEMI  (9)

	SEMI  shift 62
	END_EXEC  reduce 6


state 34
	iter : INT .  (12)

	.  reduce 12


state 35
	iter : BEEPS .  (13)

	.  reduce 13


state 36
	simple_stmt : ITERATE iter . TIMES stmt  (21)

	TIMES  shift 65
	.  error


state 37
	simple_stmt : WHILE adr . if_test DO stmt  (22)

	NEXT_TO_A_BEEPER  shift 38
	FRONT_IS_CLEAR  shift 39
	FRONT_IS_BLOCKED  shift 40
	LEFT_IS_CLEAR  shift 41
	LEFT_IS_BLOCKED  shift 42
	RIGHT_IS_CLEAR  shift 43
	RIGHT_IS_BLOCKED  shift 44
	NOT_NEXT_TO_A_BEEPER  shift 45
	FACING_NORTH  shift 46
	NOT_FACING_NORTH  shift 47
	FACING_EAST  shift 48
	NOT_FACING_EAST  shift 49
	FACING_SOUTH  shift 50
	NOT_FACING_SOUTH  shift 51
	FACING_WEST  shift 52
	NOT_FACING_WEST  shift 53
	ANY_BEEPERS_IN_BEEPER_BAG  shift 54
	NO_BEEPERS_IN_BEEPER_BAG  shift 55
	.  error

	if_test  goto 66
	test  goto 57


state 38
	test : NEXT_TO_A_BEEPER .  (37)

	.  reduce 37


state 39
	test : FRONT_IS_CLEAR .  (31)

	.  reduce 31


state 40
	test : FRONT_IS_BLOCKED .  (32)

	.  reduce 32


state 41
	test : LEFT_IS_CLEAR .  (33)

	.  reduce 33


state 42
	test : LEFT_IS_BLOCKED .  (34)

	.  reduce 34


state 43
	test : RIGHT_IS_CLEAR .  (35)

	.  reduce 35


state 44
	test : RIGHT_IS_BLOCKED .  (36)

	.  reduce 36


state 45
	test : NOT_NEXT_TO_A_BEEPER .  (38)

	.  reduce 38


state 46
	test : FACING_NORTH .  (39)

	.  reduce 39


state 47
	test : NOT_FACING_NORTH .  (40)

	.  reduce 40


state 48
	test : FACING_EAST .  (41)

	.  reduce 41


state 49
	test : NOT_FACING_EAST .  (42)

	.  reduce 42


state 50
	test : FACING_SOUTH .  (43)

	.  reduce 43


state 51
	test : NOT_FACING_SOUTH .  (44)

	.  reduce 44


state 52
	test : FACING_WEST .  (45)

	.  reduce 45


state 53
	test : NOT_FACING_WEST .  (46)

	.  reduce 46


state 54
	test : ANY_BEEPERS_IN_BEEPER_BAG .  (47)

	.  reduce 47


state 55
	test : NO_BEEPERS_IN_BEEPER_BAG .  (48)

	.  reduce 48


state 56
	simple_stmt : IF if_test . THEN stmt  (23)
	simple_stmt : IF if_test . THEN stmt else_ adr stmt  (24)

	THEN  shift 67
	.  error


state 57
	if_test : test .  (51)

	.  reduce 51


state 58
	simple_stmt : RESET BEEPS .  (26)

	.  reduce 26


state 59
	simple_stmt : COUNT BEEPS . init_count stmt  (27)
	init_count : .  (30)

	.  reduce 30

	init_count  goto 68


state 60
	fromto : FROM BEEPS . TO BEEPS  (29)

	TO  shift 69
	.  error


state 61
	stmts : stmts . SEMI stmt  (8)
	stmts : stmts . SEMI  (9)
	simple_stmt : BEGIN stmts . END  (20)

	SEMI  shift 62
	END  shift 70
	.  error


state 62
	stmts : stmts SEMI . stmt  (8)
	stmts : stmts SEMI .  (9)

	MOVE  shift 15
	TURN_LEFT  shift 16
	TURN_OFF  shift 17
	PICK_BEEPER  shift 18
	PUT_BEEPER  shift 19
	ITERATE  shift 20
	WHILE  shift 21
	IF  shift 22
	RESET  shift 23
	COUNT  shift 24
	FROM  shift 25
	ID  shift 26
	BEGIN  shift 27
	BEGIN_EXEC  reduce 9
	END_EXEC  reduce 9
	DEFINE_NEW  reduce 9
	SEMI  reduce 9
	END  reduce 9

	stmt  goto 71
	simple_stmt  goto 30
	fromto  goto 31


state 63
	simple_stmt : fromto stmt .  (28)

	.  reduce 28


state 64
	prog : BEGIN_PROG start_prog define BEGIN_EXEC adr stmts_opt END_EXEC . END_PROG  (2)

	END_PROG  shift 72
	.  error


state 65
	simple_stmt : ITERATE iter TIMES . stmt  (21)

	MOVE  shift 15
	TURN_LEFT  shift 16
	TURN_OFF  shift 17
	PICK_BEEPER  shift 18
	PUT_BEEPER  shift 19
	ITERATE  shift 20
	WHILE  shift 21
	IF  shift 22
	RESET  shift 23
	COUNT  shift 24
	FROM  shift 25
	ID  shift 26
	BEGIN  shift 27
	.  error

	stmt  goto 73
	simple_stmt  goto 30
	fromto  goto 31


state 66
	simple_stmt : WHILE adr if_test . DO stmt  (22)

	DO  shift 74
	.  error


state 67
	simple_stmt : IF if_test THEN . stmt  (23)
	simple_stmt : IF if_test THEN . stmt else_ adr stmt  (24)

	MOVE  shift 15
	TURN_LEFT  shift 16
	TURN_OFF  shift 17
	PICK_BEEPER  shift 18
	PUT_BEEPER  shift 19
	ITERATE  shift 20
	WHILE  shift 21
	IF  shift 22
	RESET  shift 23
	COUNT  shift 24
	FROM  shift 25
	ID  shift 26
	BEGIN  shift 27
	.  error

	stmt  goto 75
	simple_stmt  goto 30
	fromto  goto 31


state 68
	simple_stmt : COUNT BEEPS init_count . stmt  (27)

	MOVE  shift 15
	TURN_LEFT  shift 16
	TURN_OFF  shift 17
	PICK_BEEPER  shift 18
	PUT_BEEPER  shift 19
	ITERATE  shift 20
	WHILE  shift 21
	IF  shift 22
	RESET  shift 23
	COUNT  shift 24
	FROM  shift 25
	ID  shift 26
	BEGIN  shift 27
	.  error

	stmt  goto 76
	simple_stmt  goto 30
	fromto  goto 31


state 69
	fromto : FROM BEEPS TO . BEEPS  (29)

	BEEPS  shift 77
	.  error


state 70
	simple_stmt : BEGIN stmts END .  (20)

	.  reduce 20


state 71
	stmts : stmts SEMI stmt .  (8)

	.  reduce 8


state 72
	prog : BEGIN_PROG start_prog define BEGIN_EXEC adr stmts_opt END_EXEC END_PROG .  (2)

	.  reduce 2


state 73
	simple_stmt : ITERATE iter TIMES stmt .  (21)

	.  reduce 21


state 74
	simple_stmt : WHILE adr if_test DO . stmt  (22)

	MOVE  shift 15
	TURN_LEFT  shift 16
	TURN_OFF  shift 17
	PICK_BEEPER  shift 18
	PUT_BEEPER  shift 19
	ITERATE  shift 20
	WHILE  shift 21
	IF  shift 22
	RESET  shift 23
	COUNT  shift 24
	FROM  shift 25
	ID  shift 26
	BEGIN  shift 27
	.  error

	stmt  goto 78
	simple_stmt  goto 30
	fromto  goto 31


state 75
	simple_stmt : IF if_test THEN stmt .  (23)
	simple_stmt : IF if_test THEN stmt . else_ adr stmt  (24)

	ELSE  shift 79
	BEGIN_EXEC  reduce 23
	END_EXEC  reduce 23
	DEFINE_NEW  reduce 23
	SEMI  reduce 23
	END  reduce 23

	else_  goto 80


state 76
	simple_stmt : COUNT BEEPS init_count stmt .  (27)

	.  reduce 27


state 77
	fromto : FROM BEEPS TO BEEPS .  (29)

	.  reduce 29


state 78
	simple_stmt : WHILE adr if_test DO stmt .  (22)

	.  reduce 22


state 79
	else_ : ELSE .  (14)

	.  reduce 14


state 80
	simple_stmt : IF if_test THEN stmt else_ . adr stmt  (24)
	adr : .  (11)

	.  reduce 11

	adr  goto 81


state 81
	simple_stmt : IF if_test THEN stmt else_ adr . stmt  (24)

	MOVE  shift 15
	TURN_LEFT  shift 16
	TURN_OFF  shift 17
	PICK_BEEPER  shift 18
	PUT_BEEPER  shift 19
	ITERATE  shift 20
	WHILE  shift 21
	IF  shift 22
	RESET  shift 23
	COUNT  shift 24
	FROM  shift 25
	ID  shift 26
	BEGIN  shift 27
	.  error

	stmt  goto 82
	simple_stmt  goto 30
	fromto  goto 31


state 82
	simple_stmt : IF if_test THEN stmt else_ adr stmt .  (24)

	.  reduce 24


49 terminals, 18 nonterminals
53 grammar rules, 83 states
